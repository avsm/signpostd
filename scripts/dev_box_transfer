#!/usr/bin/env ruby
#
# This script makes sure the source code on your
# linux test VMs stay in sync with your local
# development environment, wihtout having to push
# code to github for intermediate builds

require 'rubygems'
require 'fssm'

if ARGV.size < 3 then
  puts "Usage: #{__FILE__} <username> <path-to-priv-key> [<VM-IP> list]"
  exit 1
end

# ----------------------------------------------
# ----------- Config ---------------------------

$user = ARGV[0]
$priv_key = ARGV[1]
$hosts = []
2.upto(ARGV.size - 1) do |n|
  ip = ARGV[n]
  $hosts << ip
end

$remote_path = "/home/#{$user}/signpostd"

# ----------------------------------------------
# ----------- Code -----------------------------

module Tty extend self
  def blue; bold 34; end
  def white; bold 39; end
  def red; underline 31; end
  def green; bold 32; end
  def reset; escape 0; end
  def bold n; escape "1;#{n}" end
  def underline n; escape "4;#{n}" end
  def escape n; "\033[#{n}m" if STDOUT.tty? end
end
 
class Array
  def shell_s
    cp = dup
    first = cp.shift
    cp.map{ |arg| arg.gsub " ", "\\ " }.unshift(first) * " "
  end
end

def ohai *args
  puts "#{Tty.blue}==>#{Tty.white} #{args.shell_s}#{Tty.reset}"
end
 
def warn warning
  puts "#{Tty.red}Warning#{Tty.reset}: #{warning.chomp}"
end
 
def error message
  puts "#{Tty.red}ERROR#{Tty.reset}: #{message.chomp}"
end
 
def abort message
  error message
  Kernel.exit 1
end
 
def success message
  puts "#{Tty.green}#{message}#{Tty.reset}"
end

$dir = Dir.pwd

def allowed_file? file
  test_result = file =~ /_build/
  return test_result == nil
end

def transfer_to_host host, file
  command = "scp -i #{$priv_key} #{file} #{$user}@#{host}:#{$remote_path}/#{file}"
  output = `#{command}`
  contains_error = output =~ /error/i ? true : false
  if contains_error then
    error "Transfer did not succeed, sorry" if contains_error
    error output
  end
end

def transfer file
  return unless allowed_file? file
  ohai "Transferring #{Tty.green}#{file}"
  $hosts.each do |host|
    transfer_to_host host, file
  end
end

def initial_transfer
  ohai "Performing initial file transfer"
  Dir.glob("**/*.*").each do |f|
    transfer f
  end
  ohai "Initial transfer done."
end

puts "Files will be uploaded to #{$remote_path} on #{$hosts.join(", ")}."
puts "Will use the following private key: #{$priv_key}"
ohai "Monitoring changes in #{$dir}"
initial_transfer
FSSM.monitor($dir) do
  update do |b, r|
    transfer r
  end
end
